import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
	static char[][] map;

	static int R, C;
	static int answer;
	static boolean[] visit = new boolean[26]; // 알파벳 수만큼 필요

	public static void main(String[] args) throws Exception {
		System.setIn(new FileInputStream("1987.txt"));
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		R = Integer.parseInt(st.nextToken()); // 보드 사이즈 입력받기 R*C
		C = Integer.parseInt(st.nextToken());
		map = new char[R][];
		for (int i = 0; i < R; i++) { // 보드 입력받기
			map[i] = br.readLine().toCharArray();
		}
		move(0, 0, 1); // 첫째 줄에 말 위치 (0,0) 과 지나는 칸 1 ( 시작 위치도 포함됨 )
		System.out.println(answer); // 정답 출력
	}

	static int[] dr = { -1, 1, 0, 0 }; // 상하좌우
	static int[] dc = { 0, 0, -1, 1 };

	private static void move(int r, int c, int count) {
		visit[map[r][c] - 'A'] = true; // 현재 위치의 알파벳을 방문했다고 표시
		for (int i = 0; i < 4; i++) { // 상하좌우 이동
			int nr = r + dr[i];
			int nc = c + dc[i];
			if (nr < 0 || nc < 0 || nr >= R || nc >= C) // 이동하는 좌표의 범위가 유효한지 체크
				continue;
			if (visit[map[nr][nc] - 'A']) // 이동하는 좌표의 알파벳이 방문했던 알파벳인지 체크
				continue;
			move(nr, nc, count + 1);
		}
		if (count > answer) // 최대 칸 수
			answer = count;
		visit[map[r][c] - 'A'] = false;
	}

}
